Customer Registration HTML Form

This HTML file contains a customer registration form that you can use in your web application. The form allows users to register by providing their full name, email address, and password.

Features:

User-friendly customer registration form.
Input fields for full name, email, and password.
Input validation for required fields.
Stylish and responsive design using CSS.

Usage:

To use this customer registration form in your web application:

1. Include the HTML code in your project's HTML file.

2. Customize the form's action attribute (action="conn.php") to specify the URL where you want to handle the form submission.

3. You can also modify the form fields, labels, and styling to fit your project's requirements.

CREATE DATABASE customer_registration;
USE customer_registration;

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);

Replace root and 9528176114 with your actual MySQL username and password. Make sure the table structure matches the fields you're trying to insert data into.

# HTML Login Form

To customize the appearance of the form, you can modify the CSS styles within the `<style>` section to match your design preferences. Adjust properties such as colors, fonts, and dimensions as needed.

To use this form in your project:
Ensure the form's action attribute (`action="connection.php"`) points to the PHP script that will handle the form submission and authentication.
Customize the PHP authentication logic in `connection.php` as per your project's requirements.

After successful customization and integration with your authentication logic, open the `login.html` page in a web browser. You will see the login form.

When users enter their credentials and submit the form, the PHP script (`connection.php`) will process the authentication. Customize the script to check against your database or authentication system.

Upon successful login, you can use PHP to redirect users to a welcome page or perform other actions as needed.

## Important Note

This HTML page and basic styling serve as a starting point for creating a login form. It lacks advanced security features like password hashing and proper validation, which should be implemented for a production-ready authentication system. 

after that create a table in a same databases

USE customer_registration; -- Switch to the correct database

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);




Agency Registration HTML Page
---------------------------------------------------

This HTML file contains a simple web page for agency registration. It provides a user-friendly form for agencies to register with your website. Below, you'll find an overview of the components and how to use the code.

---------------------------------------------------
File Structure
---------------------------------------------------

- index.html: The main HTML file containing the registration form and styles.
- readme.txt: This file providing instructions and information about the HTML code.

---------------------------------------------------
Instructions
---------------------------------------------------

1. **HTML Structure:**

   - `<!DOCTYPE html>`: This line defines the document type as HTML5.
   - `<html>`: The opening tag for the HTML document.
   - `<head>`: Contains metadata and stylesheet references.
   - `<title>`: Sets the title of the web page.
   - `<style>`: Contains inline CSS styles.
   - `<body>`: Contains the visible content of the web page.

2. **CSS Styles:**

   - Styles are defined for various elements on the page to ensure a clean and visually appealing layout.

3. **Registration Form:**

   - The form is contained within a `<div>` with the class "registration-container."
   - The form action is set to "agency_register.php" using the POST method, indicating where the form data will be sent for processing.

4. **Form Fields:**

   - Three input fields are provided: Agency Name, Contact Email, and Password.
   - Each input field has a label associated with it for clarity.
   - The "required" attribute ensures that users must fill out all fields before submitting the form.

5. **Submit Button:**

   - The "Register" button is styled with a red background color.
   - It has a hover effect to change its background color.

6. **Customization:**

   - You can customize the form's appearance by modifying the CSS styles in the `<style>` block.

7. **Usage:**

   - You can use this HTML code as a starting point for your agency registration page on a website. Make sure to update the form action attribute to point to your server-side script for handling form submissions (e.g., "agency_register.php").


---------------------------------------------------
Setting Up a Database and Table for Agency Registration
---------------------------------------------------

This readme file provides instructions on how to set up a MySQL database and a table to work with the PHP code for agency registration.

---------------------------------------------------
Database Configuration
---------------------------------------------------


1. **Database Connection Configuration**:
   - Open the PHP code file (e.g., `agency_register.php`).
   - Update the following variables with your database connection details:
     - `$db_host`: The hostname or IP address of your MySQL server.
     - `$db_user`: Your MySQL username.
     - `$db_pass`: Your MySQL password.
     - `$db_name`: The name of the database you want to create for agency registration.

---------------------------------------------------
Creating the Database and Table
---------------------------------------------------

2. **Create a Database**:
   - You can create a new database using a tool like phpMyAdmin or by using the MySQL command line.
   - Example command in MySQL command line:
     ```
     CREATE DATABASE agency_registration;
     ```

3. **Create a Table**:
   - After creating the database, you can create a table to store agency registration data.
   - Example command in MySQL command line (assuming you're using the `agency_registration` database):
     ```
     CREATE TABLE agencies (
         id INT AUTO_INCREMENT PRIMARY KEY,
         agencyname VARCHAR(255) NOT NULL,
         contactemail VARCHAR(255) NOT NULL,
         password VARCHAR(255) NOT NULL
     );
     ```
   - This SQL statement creates a table named `agencies` with columns for agency ID, agency name, contact email, and password.

4. **Database Configuration**:
   - Once the database and table are set up, update the `$db_name` variable in your PHP code to match the name of your newly created database ("agency_registration" in this example).


---------------------------------------------------
Agency Login HTML Page
---------------------------------------------------

This readme file provides information about the HTML code for the Agency Login page. It explains the components and usage of the page.

---------------------------------------------------
File Structure
---------------------------------------------------

- index.html: The main HTML file containing the login form and styles.
- readme.txt: This file providing instructions and information about the HTML code.

---------------------------------------------------
Instructions
---------------------------------------------------

1. **HTML Structure:**

   - `<!DOCTYPE html>`: This line defines the document type as HTML5.
   - `<html>`: The opening tag for the HTML document.
   - `<head>`: Contains metadata and stylesheet references.
   - `<title>`: Sets the title of the web page.
   - `<style>`: Contains inline CSS styles.
   - `<body>`: Contains the visible content of the web page.

2. **CSS Styles:**

   - Styles are defined for various elements on the page to ensure a clean and visually appealing layout.

3. **Login Form:**

   - The form is contained within a `<div>` with the class "login-container."
   - The form action is set to "agency_conn.php" using the POST method, indicating where the form data will be sent for processing.

4. **Form Fields:**

   - Two input fields are provided: Email and Password.
   - Each input field has a label associated with it for clarity.
   - The "required" attribute ensures that users must fill out both fields before submitting the form.

5. **Submit Button:**

   - The "Login" button is styled with a red background color.
   - It has a hover effect to change its background color.

6. **Customization:**

   - You can customize the form's appearance by modifying the CSS styles in the `<style>` block.

7. **Usage:**

   - You can use this HTML code as a starting point for your agency login page on a website. Make sure to update the form action attribute to point to your server-side script for handling login validation (e.g., "agency_conn.php").

                                                      
DATSBASES SET-UP;



open your command line and writ show databases and USE agency_registration;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);

After setting up the database and table and updating your PHP code with the correct credentials, you can run your PHP script. This script is designed to insert user data into the "users" table when a form is submitted.


I don't have time to explan full source code 


use agency_registration and create a tables;

CREATE TABLE cars(
    id INT AUTO_INCREMENT PRIMARY KEY,
    vehicle_model VARCHAR(255) NOT NULL,
    vehicle_number VARCHAR(20) NOT NULL,
    seating_capacity INT NOT NULL,
    rent_per_day DECIMAL(10, 2) NOT NULL
);


after that create one more table use agency_registration;

CREATE TABLE bookings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    country VARCHAR(255),
    num_days INT,
    start_date DATE
);

thankyou for to give me this opportunity.






 












